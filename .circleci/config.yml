# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: 'koushi_testing'
          MYSQL_USER: 'root'
          MYSQL_ROOT_PASSWORD: 'root'
          
      # - image: composer:latest

    #   working_directory: /work
    # steps:
    #   - run:
    #       name: Set timezone to Asia/Tokyo
    #       command: echo "date.timezone=Asia/Tokyo" > "$PHP_INI_DIR/conf.d/date_timezone.ini"
    #   - checkout
    #   - restore_cache:
    #       name: Restore composer cache
    #       keys:
    #         - composer-{{ .Environment.COMMON_CACHE_KEY }}-{{ checksum "composer.lock" }}
    #         - composer-{{ .Environment.COMMON_CACHE_KEY }}-
    #   - run:
    #       name: Setup requirements for continuous composer update
    #       command: composer global require enomotodev/circleci-composer-update-pr
    #   - deploy:
    #       name: Continuous composer update
    #       command: $COMPOSER_HOME/vendor/bin/circleci-composer-update-pr masanori0725 sanonokuma@gmail.com master

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    environment:
      - APP_DEBUG: true
      - APP_ENV: local
      - APP_KEY: base64:/f+601RIyypgCO7zHQqHk5qE743UvOkzjhdFClFPEPE=
      - DB_CONNECTION: mysql_testing
      - MYSQL_ALLOW_EMPTY_PASSWORD: true
      - DB_HOST: 127.0.0.1
      - DB_USERNAME: root
      - DB_PASSWORD: root
    
    - run:
          command: env

    working_directory: ~/repo
    
    dependencies:
      pre:
        - sudo apt-add-repository -y 'deb http://ppa.launchpad.net/ondrej/mysql-experimental/ubuntu     precise main'
        - sudo apt-get update; sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server-5.6
        - echo '[mysqld]' | sudo sh -c 'cat >>  /etc/mysql/my.cnf'; echo 'innodb_ft_min_token_size = 2' | sudo sh -c 'cat >>  /etc/mysql/my.cnf'; sudo /etc/init.d/mysql restart

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Install PHP Extension
      # - run: sudo docker-php-ext-install pdo_mysql

      - run:
          name: setup database
          command: |
              sudo -E docker-php-ext-install pdo_mysql
              sudo apt update
              sudo apt-get install default-mysql-client
      
      

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "./books/composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # - run:
      #     command: pwd
      #     command: ls
      - run:
          command: cd books && composer install -n --prefer-dist
      # - run: composer install -n --prefer-dist


      - save_cache:
          key: v1-dependencies-{{ checksum "./books/composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "./books/package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "./books/package.json" }}
          paths:
            - node_modules

      # prepare the database
    #   - run:
        #   command: mysql --version
    #   - run:
        #   command: pwd
      # - run: 
          # command: cd /var/run && ls
      # - run: 
          # command: cd /var/run/mysqld && ls
    #   - run: 
        #   command: cd /var/log && pwd
    #   - run: 
        #   command: cd /var/log/mysqld.log && pwd
    #   - run:
        #   command: ls
    #   - run:
        #   command: cd books && ls
    #   - run:
        #   command: cd node_modules && ls
    #   - run:
        #   command: cd yarn.lock && ls
      # - run:
      #     command: mysql less password /var/log/mysqld.log
    #   - run:
        #   command: mysql -u root -proot
    #   - run:
        #   command: grant all on *.* to 'forge'@'127.0.0.1' with grant option
    #   - run:
        #   command: flush privileges
      - run:
          command: cd books && php artisan migrate --env=testing 


      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      # - run: ./books/vendor/bin/codecept build
      # - run: ./books/vendor/bin/codecept run
      # - run: php ./books/artisan --env=testing
      - run: php ./books/vendor/bin/phpunit --configuration=./books/phpunit.xml
